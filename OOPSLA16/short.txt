#192A

- Automatically defined getters and setters [..] very old idea...
 
We do the opposite, we "generate" the idea of the field starting from
getters and setters signatures. We agree that related work should
discuss how we relate to automatic generation of setters/getters.

- Compared to a language with mixins and getters/setters, your
approach differs with respect to object construction. This is really
your only possible contribution [..] your interfaces are rebranded mixins.

It would be more correct to say that our interfaces are rebranded
traits, in the same way that traits are rebranded mixins.

Traits are a restricted model of mixins:
 they purposely introduce limitations to provide an
 'associative and commutative' composition semantics.
Our work generalizes traits but keeps the same semantics improvements.

Moreover, to the best of our knowledge, 
'mixins models with fields' treat fields specially
while our view unifies fields and methods.

Our related work section has extensive discussions on how 
Object interfaces are similar and/or differ from traits 
and mixins, both from a technical and conceptual point-of-view.

-What happens if my object stores data that is not in direct
  correspondence with the abstract state?

We believe the following java example capture the review concern:
------
class Point{ //a
  private double radius;   private double angle;  //b
  public Point(int x, int y){ //c
    this.radius=/*computeRadius*/;   this.angle=/*computeAngle*/; //d
  } 
  double x(){/*..*/}  double y(){/*..*/}//e
}
----
In order to obtain the same effect in ClassLess Java, we need
to explicitly declare an of method, as the reviewer suggested.
In order to encode the privateness of the state,
we can use the facade pattern (section6)
--------
interface Point{ double  x(); double y();  //a
  static Point of(double x, double y){//c
    return PolarPoint.of(/*computeRadius*/,/*computeAngle*/);//d
    }
  }
@Obj interface PolarPoint extends Point{ double radius(); double angle(); //b
     double x(){/*..*/}   double y(){/*..*/} //e
   }
------
Note how the labels in the java code correspond to labels in our code; in
particular, the non trivial constructor (c,d) is rewrote as an of method.


- Your generated code may be type incorrect [.."heir coherence"..].
  Is this reported to the programmer in any way?

The generated code (code that the programmer does not write):
  the content of the 'of' method and refined methods
is type correct.

Heir coherence causes type errors, *but these errors are not in the
generated code*. What happens is that the generated code will make
client code incorrect. Such errors are reported, as normal, as an error
in user client code. The discussion in Section 3.2, illustrates what 
would happen. For the code:

interface A { int x(); A withX(int x); } 
@Obj interface B extends A {} // no error here!
interface C extends B { A withX(int x); } // **error is here**!

the error would be in interface C, which is client code, and is
untouched by our mechanism.

- What happens with debugging?

Please see answer to reviewer #192C.

#192B

- On determining what's a field, and generating of(...) using fields
  as arguments. 

The of(...) method is generated by analyzing the names of the methods
in the interface. Users need to follow the naming convention
illustrated in Table 1. The first 4 rows show what you need to write
for getting the four possible operations on a field called "x".

- Isn't this somewhat excessive, and potentially, the of() method
  generated not very usable?

Yes, in the case you propose, @Obj would generate of(Object first,
LinkedList next, int size, boolean isEmpty); but this is not the way to
write a LinkedList in CLJ. You should write:

interface LinkedList {//a plain interface with *abstract* methods in Java
 Object first();  LinkedList next();  int size();  boolean isEmpty();
}

In Classless Java interfaces with "real" abstract methods are just
plain old Java interfaces. Later, when you want to create a concrete
implementation you can use @Obj. For example:

@Obj interface EmptyList extends LinkedList{
 default Object first(){/*error*/}
 LinkedList next(){/*error*/}
 int size(){return 0;}
 boolean isEmpty(){return true;}
}

@Obj interface NonEmptyList extends LinkedList{
 default int size(){return this.next().size()+1;}
 default boolean isEmpty(){return false;}
}

Note how this is much shorter than the equivalent Java version.  

By accepting the terrible hack of null,
another possible implementation of LinkedList would be:

@Obj interface LinkedList {
 Object first();
 LinkedList next();
 default int size(){
   if (this.next()==null){return 1;}
   return this.next().size()+1;
 }
 //boolean isEmpty();//makes no sense since the empty list is null
}

Here "first" and "next" are fields, and size is a concrete method.

- Generating with(...) methods for non-trivial inheritance hierarchies.

Property updaters are generated *only* when users ask for them, that
is, they declare an abstract 'MyInterfaceName with(AnotherType)' method.
where AnotherType does not need to be in the hierarchy of
MyInterfaceName. In the example you proposed, *if* the user was to
ask for

Point3D with(Point2D); 
Point3D with(ColoredPoint); 
Point3D with(Point);

Those methods would be all implemented by looking what fields have the
same name and compatible types inside of Point3D and, respectively,
Point2D, ColoredPoint, Point. In general, an updater is just
performing the equivalent of a sequence of with-'s. 

- It seems one would have to know at compile time all the
ways Point2D might be used in the hierarchy...

As a follow up from the previous reply, there's no need to know
compile time all the ways Point2D might be used in the hierarchy,
since users have to explicitly ask for an updater, and the argument 
of with- does not need to be related to the self type.

#192C

- "What are the implications for performance? Debugging? IDEs?"

Performance: 

Performance in this prototype implementation depends on the
performance of dynamic method call on Java, especially on the JIT.  We
do not expect any major performance issue. Java and its JIT
are highly optimized to support getter, setters on class types, but
less optimized when it comes to interface methods. However, interfaces
are intensively used in Java already, and while less efficient than
classes, they are not considered a performance bottleneck.

Debugging:

Users can debug client code normally, however when 
the user tries to step into the generated code, the debugger will
just show the position of the @Obj annotation;
similarly to what happens in pure Java when stepping in the 
language-generated default constructor.
The logic of the generated code is very simple; our practical
experience is that we never felt the need of stepping into the generated code.

IDEs: 

We discuss IDE support in Section 3. Figure 5 shows an example of
Classless Java running on Eclipse. As the reader can see, features
like auto-completion and the outline view work out-of-the-box. Also,
Java errors are reported in the IDE (see the error in line 13, and the
underlined code in Point3D).