package c0.cj;

import java.io.PrintWriter;

public interface Constants {
    static final int tLPAR = 0;
    static final int tRPAR = 1;
    static final int tASSIGN = 2;
    static final int tSEMI = 3;
    static final int tCOMMA = 4;
    static final int tEQ = 5;
    static final int tNE = 6;
    static final int tID = 7;
    static final int tCONST = 8;
    static final int tCHAR = 9;
    static final int tADD = 10;
    static final int tSUB = 11;
    static final int tMUL = 12;
    static final int tDIV = 13;
    static final int tMOD = 14;
    static final int tLBRACK = 15;
    static final int tRBRACK = 16;
    static final int tOR = 17;
    static final int tAND = 18;
    static final int tNOT = 19;
    static final int tLT = 20;
    static final int tGT = 21;
    static final int tLEQ = 22;
    static final int tGEQ = 23;
    static final int tSHARP = 24;
    static final int tDOT = 25;
    static final int tINT = 26;
    static final int tIF = 27;
    static final int tELSE = 28;
    static final int tWHILE = 29;
    static final int tGETCHAR = 30;
    static final int tPUTCHAR = 31;
    static final int tINCLUDE = 32;
    static final int tRETURN = 33;
    static final int tMAIN = 34;
    static final int tEOF = 35;
    static final int tERROR = 36;
    static final int tWHITE = 37;

    public static void codeLibrary(PrintWriter out) {
        code(".method mul_", out);
        code(".args 3", out);
        code(".locals 2", out);
        code("bipush 1", out);
        code("istore 4", out);
        code("bipush 0", out);
        code("iload 1", out);
        code("isub", out);
        code("iflt mul0", out);
        code("bipush 0", out);
        code("iload 1 ", out);
        code("isub", out);
        code("istore 1", out);
        code("bipush 0", out);
        code("istore 4", out);
        code("mul0:", out);
        code("bipush 0", out);
        code("istore 3", out);
        code("mul1:", out);
        code("iload 1", out);
        code("ifeq mul2", out);
        code("iload 1", out);
        code("bipush 1", out);
        code("isub", out);
        code("istore 1", out);
        code("iload 3", out);
        code("iload 2", out);
        code("iadd", out);
        code("istore 3", out);
        code("goto mul1", out);
        code("mul2:", out);
        code("bipush 1", out);
        code("iload 4", out);
        code("isub ", out);
        code("ifeq mul3", out);
        code("bipush 0", out);
        code("iload 3", out);
        code("isub", out);
        code("istore 3", out);
        code("mul3:", out);
        code("iload 3", out);
        code("ireturn", out);
        code("", out);
        code(".method div_", out);
        code(".args 3", out);
        code(".locals 2", out);
        code("bipush 1", out);
        code("istore 4", out);
        code("bipush 0", out);
        code("iload 1", out);
        code("isub", out);
        code("iflt div0", out);
        code("bipush 0", out);
        code("iload 1 ", out);
        code("isub", out);
        code("istore 1", out);
        code("bipush 0", out);
        code("istore 4", out);
        code("div0:", out);
        code("bipush 0", out);
        code("iload 2", out);
        code("isub", out);
        code("iflt div1", out);
        code("bipush 0", out);
        code("iload 2 ", out);
        code("isub", out);
        code("istore 2", out);
        code("iload 4", out);
        code("bipush 1", out);
        code("iadd", out);
        code("istore 4", out);
        code("div1:", out);
        code("bipush 0", out);
        code("istore 3", out);
        code("div2:", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("iflt div3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("istore 1", out);
        code("iload 3", out);
        code("bipush 1", out);
        code("iadd", out);
        code("istore 3", out);
        code("goto div2", out);
        code("div3:", out);
        code("bipush 0", out);
        code("iload 4", out);
        code("isub ", out);
        code("iflt div4", out);
        code("bipush 0", out);
        code("iload 3", out);
        code("isub", out);
        code("istore 3", out);
        code("div4:", out);
        code("iload 3", out); 
        code("ireturn", out); 
        code("", out);
        code(".method mod_", out);
        code(".args 3", out);
        code(".locals 1", out);
        code("bipush 44", out);
        code("iload 1", out);
        code("iload 2", out);
        code("invokevirtual div_", out);
        code("istore 3", out);
        code("iload 1", out);
        code("bipush 44", out);
        code("iload 3", out);
        code("iload 2", out);
        code("invokevirtual mul_", out);
        code("isub", out);
        code("ireturn", out); 
        code("", out);
        code(".method not_", out);
        code(".args 2", out);
        code("iload 1", out);
        code("ifeq not1", out);
        code("bipush 0", out);
        code("goto not0", out);
        code("not1:", out);
        code("bipush 1", out);
        code("not0:", out);
        code("", out);
        code(".method eq_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("ifeq eq1", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("eq1:", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("", out);
        code(".method ne_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("ifeq ne0", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("ne0:", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("", out);
        code(".method lt_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("iflt lt1", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("lt1:", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("", out);
        code(".method gt_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("iflt gt0", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("gt0:", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("", out);
        code(".method leq_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("dup", out);
        code("ifeq leqpop1", out);
        code("iflt leq1", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("leq1:", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("leqpop1:", out);
        code("pop", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("", out);
        code(".method geq_", out);
        code(".args 3", out);
        code("iload 1", out);
        code("iload 2", out);
        code("isub", out);
        code("dup", out);
        code("ifeq geqpop1", out);
        code("iflt geq0", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("geq0:", out);
        code("bipush 0", out);
        code("ireturn", out);
        code("geqpop1:", out);
        code("pop", out);
        code("bipush 1", out);
        code("ireturn", out);
        code("", out);
    }

    public static void code(String s, PrintWriter out) {
        try {
            out.write(s+"\n");
        } catch(Exception e) { e.printStackTrace(); }
    }

    static boolean letter(int c) {
        return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z');
    }

    static boolean digit(int c) {
        return ('0' <= c && c <= '9');
    }

    static boolean alpha(int c) {
        return letter(c) || digit(c);
    }
}
